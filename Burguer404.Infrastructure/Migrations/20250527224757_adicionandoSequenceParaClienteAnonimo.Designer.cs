// <auto-generated />
using System;
using Burguer404.Infrastructure.Data.ContextDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Burguer404.Infrastructure.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250527224757_adicionandoSequenceParaClienteAnonimo")]
    partial class adicionandoSequenceParaClienteAnonimo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("CodAnonimoSequence", "dbo");

            modelBuilder.HasSequence("CodPedidoSequence", "dbo");

            modelBuilder.Entity("Burguer404.Domain.Entities.ClassesEnums.CategoriaPedidoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaPedido", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Lanche"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Acompanhamento"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Bebida"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Sobremesa"
                        });
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.ClassesEnums.StatusPedidoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StatusPedido", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Recebido"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Em preparação"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Pronto"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Finalizado"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Cancelado"
                        });
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Cliente.ClienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PerfilClienteId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("PerfilClienteId");

                    b.ToTable("Clientes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "111.111.111-11",
                            Email = "admin@admin.com",
                            Nome = "admin",
                            PerfilClienteId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "123.456.789-10",
                            Email = "usuario@usuario.com",
                            Nome = "usuario",
                            PerfilClienteId = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Cliente.PerfilClienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PerfilCliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "usuario"
                        });
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Pedido.PedidoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoPedido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusPedidoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("StatusPedidoId");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Pedido.PedidoProdutoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoProduto", (string)null);
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("ImagemByte")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaProdutoId");

                    b.ToTable("Produtos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaProdutoId = 1,
                            Descricao = "adicional de bacon",
                            Nome = "X-Bacon",
                            Preco = 31.989999999999998,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CategoriaProdutoId = 3,
                            Descricao = "Zero açucar",
                            Nome = "Coca-Cola",
                            Preco = 7.0,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CategoriaProdutoId = 2,
                            Descricao = "300g",
                            Nome = "Batata frita",
                            Preco = 15.0,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CategoriaProdutoId = 4,
                            Descricao = "Morango",
                            Nome = "Sorvete",
                            Preco = 9.0,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CategoriaProdutoId = 1,
                            Descricao = "saladinha da boa",
                            Nome = "X-Salada",
                            Preco = 24.989999999999998,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CategoriaProdutoId = 3,
                            Descricao = "concorrente",
                            Nome = "Pepsi",
                            Preco = 7.0,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CategoriaProdutoId = 2,
                            Descricao = "300g",
                            Nome = "Onion rings",
                            Preco = 20.0,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CategoriaProdutoId = 4,
                            Descricao = "Chocolate com morango",
                            Nome = "Bolo de pote",
                            Preco = 14.0,
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CategoriaProdutoId = 1,
                            Descricao = "tudo do bom e do melhor",
                            Nome = "X-Tudo",
                            Preco = 40.0,
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            CategoriaProdutoId = 3,
                            Descricao = "suquinho",
                            Nome = "Suco de maracuja",
                            Preco = 10.0,
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            CategoriaProdutoId = 2,
                            Descricao = "400g",
                            Nome = "Batata + Onion rings P",
                            Preco = 27.5,
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            CategoriaProdutoId = 4,
                            Descricao = "Melhor de todos",
                            Nome = "Pudim",
                            Preco = 99.0,
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            CategoriaProdutoId = 1,
                            Descricao = "fitness",
                            Nome = "X-Frango",
                            Preco = 22.989999999999998,
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            CategoriaProdutoId = 1,
                            Descricao = "pouca gordura graças a Deus",
                            Nome = "X-Calabresa",
                            Preco = 26.989999999999998,
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            CategoriaProdutoId = 1,
                            Descricao = "suculência ao máximo",
                            Nome = "X-Picanha",
                            Preco = 36.990000000000002,
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            CategoriaProdutoId = 3,
                            Descricao = "suquinho 2",
                            Nome = "Suco de limão",
                            Preco = 7.0,
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            CategoriaProdutoId = 3,
                            Descricao = "água de torneira",
                            Nome = "H2O",
                            Preco = 5.0,
                            Status = true
                        },
                        new
                        {
                            Id = 18,
                            CategoriaProdutoId = 2,
                            Descricao = "700g",
                            Nome = "Batata + Onion rings M",
                            Preco = 33.0,
                            Status = true
                        },
                        new
                        {
                            Id = 19,
                            CategoriaProdutoId = 2,
                            Descricao = "1Kg",
                            Nome = "Batata + Onion rings G",
                            Preco = 41.0,
                            Status = true
                        });
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Cliente.ClienteEntity", b =>
                {
                    b.HasOne("Burguer404.Domain.Entities.Cliente.PerfilClienteEntity", "PerfilCliente")
                        .WithMany("Cliente")
                        .HasForeignKey("PerfilClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PerfilCliente");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Pedido.PedidoEntity", b =>
                {
                    b.HasOne("Burguer404.Domain.Entities.Cliente.ClienteEntity", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Burguer404.Domain.Entities.ClassesEnums.StatusPedidoEntity", "StatusPedido")
                        .WithMany()
                        .HasForeignKey("StatusPedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("StatusPedido");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Pedido.PedidoProdutoEntity", b =>
                {
                    b.HasOne("Burguer404.Domain.Entities.Pedido.PedidoEntity", "Pedido")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Burguer404.Domain.Entities.Produto.ProdutoEntity", "Produto")
                        .WithMany("PedidoProduto")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.HasOne("Burguer404.Domain.Entities.ClassesEnums.CategoriaPedidoEntity", "CategoriaProduto")
                        .WithMany()
                        .HasForeignKey("CategoriaProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoriaProduto");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Cliente.ClienteEntity", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Cliente.PerfilClienteEntity", b =>
                {
                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Pedido.PedidoEntity", b =>
                {
                    b.Navigation("PedidoProduto");
                });

            modelBuilder.Entity("Burguer404.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.Navigation("PedidoProduto");
                });
#pragma warning restore 612, 618
        }
    }
}
